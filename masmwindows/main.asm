; Listing generated by Microsoft (R) Optimizing Compiler Version 19.36.32537.0 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

CONST	SEGMENT
?PowersOfTen32@Math@@3QBHB DD 01H			; Math::PowersOfTen32
	DD	0aH
	DD	064H
	DD	03e8H
	DD	02710H
	DD	0186a0H
	DD	0f4240H
	DD	0989680H
	DD	05f5e100H
	DD	03b9aca00H
	ORG $+8
?PowersOfTen64@Math@@3QB_JB DQ 0000000000000001H	; Math::PowersOfTen64
	DQ	000000000000000aH
	DQ	0000000000000064H
	DQ	00000000000003e8H
	DQ	0000000000002710H
	DQ	00000000000186a0H
	DQ	00000000000f4240H
	DQ	0000000000989680H
	DQ	0000000005f5e100H
	DQ	000000003b9aca00H
	DQ	00000002540be400H
	DQ	000000174876e800H
	DQ	000000e8d4a51000H
	DQ	000009184e72a000H
	DQ	00005af3107a4000H
	DQ	00038d7ea4c68000H
	DQ	002386f26fc10000H
	DQ	016345785d8a0000H
	DQ	0de0b6b3a7640000H
CONST	ENDS
PUBLIC	?min@Math@@YAHHH@Z				; Math::min
PUBLIC	?clamp@Math@@YAHHHH@Z				; Math::clamp
PUBLIC	?log10@Math@@YACH@Z				; Math::log10
PUBLIC	?power10@Math@@YAHH@Z				; Math::power10
PUBLIC	??0String32@@QEAA@XZ				; String32::String32
PUBLIC	??1String32@@QEAA@XZ				; String32::~String32
PUBLIC	?clear@String32@@QEAAXXZ			; String32::clear
PUBLIC	?data@String32@@QEAAPEADXZ			; String32::data
PUBLIC	?size@String32@@QEAAAEAHXZ			; String32::size
PUBLIC	??6String32@@QEAAAEAV0@PEBD@Z			; String32::operator<<
PUBLIC	??6String32@@QEAAAEAV0@D@Z			; String32::operator<<
PUBLIC	??6String32@@QEAAAEAV0@H@Z			; String32::operator<<
PUBLIC	main
PUBLIC	??_C@_0N@BDHHGPFP@bytesread?5?3?5@		; `string'
EXTRN	_read:PROC
EXTRN	_write:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	log10:PROC
EXTRN	__security_cookie:QWORD
EXTRN	_fltused:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$?log10@Math@@YACH@Z DD imagerel $LN4
	DD	imagerel $LN4+26
	DD	imagerel $unwind$?log10@Math@@YACH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??6String32@@QEAAAEAV0@H@Z DD imagerel $LN28
	DD	imagerel $LN28+224
	DD	imagerel $unwind$??6String32@@QEAAAEAV0@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$main DD	imagerel $LN80
	DD	imagerel $LN80+513
	DD	imagerel $unwind$main
pdata	ENDS
;	COMDAT ??_C@_0N@BDHHGPFP@bytesread?5?3?5@
CONST	SEGMENT
??_C@_0N@BDHHGPFP@bytesread?5?3?5@ DB 'bytesread : ', 00H ; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$main DD	0c2d19H
	DD	014741fH
	DD	013641fH
	DD	012341fH
	DD	0f018b21fH
	DD	0d014e016H
	DD	05010c012H
	DD	imagerel __GSHandlerCheck
	DD	050H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??6String32@@QEAAAEAV0@H@Z DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?log10@Math@@YACH@Z DD 010401H
	DD	04204H
xdata	ENDS
; Function compile flags: /Ogtpy
;	COMDAT main
_TEXT	SEGMENT
test$ = 32
ch$ = 72
__$ArrayPad$ = 80
main	PROC						; COMDAT
; File D:\Dev\eal\masmwindows\main.cpp
; Line 1087
$LN80:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	mov	QWORD PTR [rsp+24], rdi
	push	rbp
	push	r12
	push	r13
	push	r14
	push	r15
	mov	rbp, rsp
	sub	rsp, 96					; 00000060H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rbp-96], rax
; Line 1093
	mov	r8d, 8
	mov	QWORD PTR ch$[rbp-96], -1
	lea	rdx, QWORD PTR ch$[rbp-96]
	xor	ecx, ecx
	call	_read
; Line 1094
	mov	r8d, 8
	lea	rdx, QWORD PTR ch$[rbp-96]
	mov	r12d, eax
	lea	ecx, QWORD PTR [r8-7]
	call	_write
; Line 575
	xor	ebx, ebx
	lea	r13, OFFSET FLAT:?PowersOfTen32@Math@@3QBHB
	xorps	xmm0, xmm0
	mov	r14d, ebx
	movups	XMMWORD PTR test$[rbp-92], xmm0
	lea	r15d, QWORD PTR [rbx+31]
	movups	XMMWORD PTR test$[rbp-76], xmm0
	npad	9
$LL7@main:
; Line 1100
	movsx	eax, BYTE PTR ch$[rbp+r14-96]
; Line 616
	mov	edi, ebx
	mov	DWORD PTR test$[rbp-96], ebx
; Line 617
	mov	BYTE PTR test$[rbp-92], bl
; Line 981
	test	eax, eax
	jns	SHORT $LN15@main
; Line 985
	mov	edi, 1
	mov	BYTE PTR test$[rbp-92], 45		; 0000002dH
	mov	DWORD PTR test$[rbp-96], edi
$LN15@main:
; Line 481
	mov	esi, eax
	neg	esi
	test	eax, eax
	cmovns	esi, eax
	movd	xmm0, esi
	cvtdq2pd xmm0, xmm0
	call	log10
	cvttsd2si eax, xmm0
; Line 989
	movsx	r9d, al
	test	al, al
	js	SHORT $LN13@main
$LL14@main:
; Line 346
	cmp	r9d, 9
	jae	SHORT $LN21@main
	test	r9d, r9d
	mov	eax, ebx
	cmovne	eax, r9d
	jmp	SHORT $LN22@main
$LN21@main:
	mov	eax, 9
$LN22@main:
; Line 506
	mov	ecx, eax
; Line 991
	mov	eax, esi
	cdq
	idiv	DWORD PTR [r13+rcx*4]
	mov	r8d, eax
	mov	eax, 1717986919				; 66666667H
	imul	r8d
	movsxd	rax, edi
; Line 278
	mov	edi, r15d
; Line 991
	sar	edx, 2
	mov	ecx, edx
	shr	ecx, 31
	add	edx, ecx
	lea	ecx, DWORD PTR [rdx+rdx*4]
	add	ecx, ecx
	sub	r8d, ecx
	add	r8b, 48					; 00000030H
	mov	BYTE PTR test$[rbp+rax-92], r8b
; Line 994
	mov	eax, DWORD PTR test$[rbp-96]
	inc	eax
; Line 278
	cmp	eax, r15d
	cmovl	edi, eax
; Line 989
	sub	r9d, 1
; Line 994
	mov	DWORD PTR test$[rbp-96], edi
	jns	SHORT $LL14@main
$LN13@main:
; Line 998
	movsxd	rax, edi
; Line 1101
	lea	rdx, QWORD PTR test$[rbp-92]
; Line 278
	mov	ecx, r15d
; Line 998
	mov	BYTE PTR test$[rbp+rax-92], bl
; Line 969
	movsxd	rax, DWORD PTR test$[rbp-96]
	mov	BYTE PTR test$[rbp+rax-92], 32		; 00000020H
; Line 970
	mov	eax, DWORD PTR test$[rbp-96]
	inc	eax
; Line 278
	cmp	eax, r15d
	cmovl	ecx, eax
; Line 970
	mov	DWORD PTR test$[rbp-96], ecx
	movsxd	rax, ecx
; Line 1101
	mov	ecx, 1
; Line 971
	mov	BYTE PTR test$[rbp+rax-92], bl
; Line 1101
	mov	r8d, DWORD PTR test$[rbp-96]
	call	_write
	inc	r14
	cmp	r14, 8
	jl	$LL7@main
; Line 616
	mov	DWORD PTR test$[rbp-96], ebx
; Line 958
	lea	rdx, OFFSET FLAT:??_C@_0N@BDHHGPFP@bytesread?5?3?5@+1
	mov	BYTE PTR test$[rbp-92], 98		; 00000062H
$LL36@main:
	cmp	ebx, r15d
	jge	SHORT $LN70@main
	movzx	ecx, BYTE PTR [rdx]
; Line 959
	inc	ebx
	movsxd	rax, ebx
	inc	rdx
	mov	DWORD PTR test$[rbp-96], ebx
	mov	BYTE PTR test$[rbp+rax-92], cl
	test	cl, cl
	je	SHORT $LN70@main
; Line 958
	mov	ebx, DWORD PTR test$[rbp-96]
	jmp	SHORT $LL36@main
$LN70@main:
; Line 1104
	mov	edx, r12d
; Line 960
	mov	BYTE PTR test$[rbp-61], 0
; Line 1104
	lea	rcx, QWORD PTR test$[rbp-96]
	call	??6String32@@QEAAAEAV0@H@Z		; String32::operator<<
; Line 1105
	mov	ecx, 1
; Line 969
	movsxd	rdx, DWORD PTR [rax]
	mov	BYTE PTR [rdx+rax+4], 10
; Line 970
	mov	edx, DWORD PTR [rax]
	inc	edx
; Line 278
	cmp	edx, r15d
	cmovl	r15d, edx
; Line 970
	mov	DWORD PTR [rax], r15d
; Line 971
	movsxd	rdx, r15d
	mov	BYTE PTR [rdx+rax+4], 0
; Line 1105
	lea	rdx, QWORD PTR test$[rbp-92]
	mov	r8d, DWORD PTR test$[rbp-96]
	call	_write
; Line 1106
	xor	eax, eax
; Line 1107
	mov	rcx, QWORD PTR __$ArrayPad$[rbp-96]
	xor	rcx, rsp
	call	__security_check_cookie
	lea	r11, QWORD PTR [rsp+96]
	mov	rbx, QWORD PTR [r11+48]
	mov	rsi, QWORD PTR [r11+56]
	mov	rdi, QWORD PTR [r11+64]
	mov	rsp, r11
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rbp
	ret	0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??6String32@@QEAAAEAV0@H@Z
_TEXT	SEGMENT
this$ = 48
value$ = 56
??6String32@@QEAAAEAV0@H@Z PROC				; String32::operator<<, COMDAT
; File D:\Dev\eal\masmwindows\main.cpp
; Line 979
$LN28:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	movsxd	rbx, DWORD PTR [rcx]
	mov	esi, edx
	mov	rdi, rcx
; Line 981
	test	edx, edx
	jns	SHORT $LN22@operator
; Line 984
	mov	BYTE PTR [rbx+rcx+4], 45		; 0000002dH
	neg	esi
; Line 985
	mov	eax, DWORD PTR [rcx]
; Line 278
	mov	ebx, 31
; Line 985
	inc	eax
; Line 278
	cmp	eax, ebx
	cmovl	ebx, eax
; Line 985
	mov	DWORD PTR [rcx], ebx
$LN22@operator:
	movd	xmm0, esi
; Line 481
	mov	ebp, ebx
	cvtdq2pd xmm0, xmm0
	call	log10
	cvttsd2si eax, xmm0
; Line 989
	movsx	r9d, al
	test	al, al
	js	SHORT $LN3@operator
; Line 985
	lea	r10, OFFSET FLAT:?PowersOfTen32@Math@@3QBHB
	npad	7
$LL4@operator:
; Line 346
	cmp	r9d, 9
	jae	SHORT $LN11@operator
	xor	eax, eax
	test	r9d, r9d
	cmovne	eax, r9d
	jmp	SHORT $LN12@operator
$LN11@operator:
	mov	eax, 9
$LN12@operator:
; Line 506
	mov	ecx, eax
; Line 278
	mov	ebx, 31
; Line 991
	mov	eax, esi
	cdq
	idiv	DWORD PTR [r10+rcx*4]
	mov	r8d, eax
	mov	eax, 1717986919				; 66666667H
	imul	r8d
	movsxd	rax, ebp
	sar	edx, 2
	mov	ecx, edx
	shr	ecx, 31
	add	edx, ecx
	lea	ecx, DWORD PTR [rdx+rdx*4]
	add	ecx, ecx
	sub	r8d, ecx
	add	r8b, 48					; 00000030H
	mov	BYTE PTR [rax+rdi+4], r8b
; Line 994
	mov	eax, DWORD PTR [rdi]
	inc	eax
; Line 278
	cmp	eax, ebx
	cmovl	ebx, eax
; Line 989
	sub	r9d, 1
; Line 994
	mov	DWORD PTR [rdi], ebx
	mov	ebp, ebx
	jns	SHORT $LL4@operator
$LN3@operator:
; Line 1000
	mov	rbp, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	movsxd	rax, ebx
	mov	rbx, QWORD PTR [rsp+48]
	mov	BYTE PTR [rax+rdi+4], 0
	mov	rax, rdi
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??6String32@@QEAAAEAV0@H@Z ENDP				; String32::operator<<
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??6String32@@QEAAAEAV0@D@Z
_TEXT	SEGMENT
this$ = 8
character$ = 16
??6String32@@QEAAAEAV0@D@Z PROC				; String32::operator<<, COMDAT
; File D:\Dev\eal\masmwindows\main.cpp
; Line 969
	movsxd	rax, DWORD PTR [rcx]
	mov	BYTE PTR [rax+rcx+4], dl
; Line 278
	mov	edx, 31
; Line 970
	mov	eax, DWORD PTR [rcx]
	inc	eax
; Line 278
	cmp	eax, edx
	cmovl	edx, eax
; Line 971
	movsxd	rax, edx
	mov	DWORD PTR [rcx], edx
	mov	BYTE PTR [rax+rcx+4], 0
; Line 972
	mov	rax, rcx
; Line 973
	ret	0
??6String32@@QEAAAEAV0@D@Z ENDP				; String32::operator<<
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??6String32@@QEAAAEAV0@PEBD@Z
_TEXT	SEGMENT
this$ = 8
array$ = 16
??6String32@@QEAAAEAV0@PEBD@Z PROC			; String32::operator<<, COMDAT
; File D:\Dev\eal\masmwindows\main.cpp
; Line 958
	movzx	r8d, BYTE PTR [rdx]
	movsxd	rax, DWORD PTR [rcx]
	mov	BYTE PTR [rax+rcx+4], r8b
	test	r8b, r8b
	je	SHORT $LN9@operator
	lea	r9, QWORD PTR [rdx+1]
$LL2@operator:
	movsxd	r8, DWORD PTR [rcx]
	cmp	r8d, 31
	jge	SHORT $LN9@operator
; Line 959
	lea	eax, DWORD PTR [r8+1]
	mov	DWORD PTR [rcx], eax
	movzx	edx, BYTE PTR [r9]
	inc	r9
	mov	BYTE PTR [r8+rcx+5], dl
	test	dl, dl
	jne	SHORT $LL2@operator
$LN9@operator:
; Line 962
	mov	BYTE PTR [rcx+35], 0
	mov	rax, rcx
	ret	0
??6String32@@QEAAAEAV0@PEBD@Z ENDP			; String32::operator<<
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?size@String32@@QEAAAEAHXZ
_TEXT	SEGMENT
this$ = 8
?size@String32@@QEAAAEAHXZ PROC				; String32::size, COMDAT
; File D:\Dev\eal\masmwindows\main.cpp
; Line 846
	mov	rax, rcx
; Line 847
	ret	0
?size@String32@@QEAAAEAHXZ ENDP				; String32::size
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?data@String32@@QEAAPEADXZ
_TEXT	SEGMENT
this$ = 8
?data@String32@@QEAAPEADXZ PROC				; String32::data, COMDAT
; File D:\Dev\eal\masmwindows\main.cpp
; Line 830
	lea	rax, QWORD PTR [rcx+4]
; Line 831
	ret	0
?data@String32@@QEAAPEADXZ ENDP				; String32::data
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?clear@String32@@QEAAXXZ
_TEXT	SEGMENT
this$ = 8
?clear@String32@@QEAAXXZ PROC				; String32::clear, COMDAT
; File D:\Dev\eal\masmwindows\main.cpp
; Line 616
	mov	DWORD PTR [rcx], 0
; Line 617
	mov	BYTE PTR [rcx+4], 0
; Line 618
	ret	0
?clear@String32@@QEAAXXZ ENDP				; String32::clear
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??1String32@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??1String32@@QEAA@XZ PROC				; String32::~String32, COMDAT
; File D:\Dev\eal\masmwindows\main.cpp
; Line 608
	ret	0
??1String32@@QEAA@XZ ENDP				; String32::~String32
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??0String32@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??0String32@@QEAA@XZ PROC				; String32::String32, COMDAT
; File D:\Dev\eal\masmwindows\main.cpp
; Line 576
	xorps	xmm0, xmm0
; Line 574
	mov	DWORD PTR [rcx], 0
; Line 575
	movups	XMMWORD PTR [rcx+4], xmm0
; Line 578
	mov	rax, rcx
	movups	XMMWORD PTR [rcx+20], xmm0
	ret	0
??0String32@@QEAA@XZ ENDP				; String32::String32
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?power10@Math@@YAHH@Z
_TEXT	SEGMENT
x$ = 8
?power10@Math@@YAHH@Z PROC				; Math::power10, COMDAT
; File D:\Dev\eal\masmwindows\main.cpp
; Line 346
	cmp	ecx, 9
	jge	SHORT $LN5@power10
	xor	eax, eax
	test	ecx, ecx
	cmovg	eax, ecx
; Line 506
	lea	rcx, OFFSET FLAT:?PowersOfTen32@Math@@3QBHB
	cdqe
	mov	eax, DWORD PTR [rcx+rax*4]
; Line 507
	ret	0
$LN5@power10:
; Line 346
	mov	eax, 9
; Line 506
	lea	rcx, OFFSET FLAT:?PowersOfTen32@Math@@3QBHB
	cdqe
	mov	eax, DWORD PTR [rcx+rax*4]
; Line 507
	ret	0
?power10@Math@@YAHH@Z ENDP				; Math::power10
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?log10@Math@@YACH@Z
_TEXT	SEGMENT
x$ = 48
?log10@Math@@YACH@Z PROC				; Math::log10, COMDAT
; File D:\Dev\eal\masmwindows\main.cpp
; Line 480
$LN4:
	sub	rsp, 40					; 00000028H
	movd	xmm0, ecx
; Line 481
	cvtdq2pd xmm0, xmm0
	call	log10
	cvttsd2si eax, xmm0
; Line 482
	add	rsp, 40					; 00000028H
	ret	0
?log10@Math@@YACH@Z ENDP				; Math::log10
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?clamp@Math@@YAHHHH@Z
_TEXT	SEGMENT
x$ = 8
min$ = 16
max$ = 24
?clamp@Math@@YAHHHH@Z PROC				; Math::clamp, COMDAT
; File D:\Dev\eal\masmwindows\main.cpp
; Line 346
	cmp	ecx, r8d
	jge	SHORT $LN3@clamp
	cmp	ecx, edx
	cmovg	edx, ecx
	mov	eax, edx
; Line 347
	ret	0
$LN3@clamp:
; Line 346
	mov	eax, r8d
; Line 347
	ret	0
?clamp@Math@@YAHHHH@Z ENDP				; Math::clamp
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?min@Math@@YAHHH@Z
_TEXT	SEGMENT
x$ = 8
y$ = 16
?min@Math@@YAHHH@Z PROC					; Math::min, COMDAT
; File D:\Dev\eal\masmwindows\main.cpp
; Line 278
	cmp	ecx, edx
	cmovl	edx, ecx
	mov	eax, edx
; Line 279
	ret	0
?min@Math@@YAHHH@Z ENDP					; Math::min
_TEXT	ENDS
END
